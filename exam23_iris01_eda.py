# -*- coding: utf-8 -*-
"""exam23_iris01_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vjE9F37iWfkpZ2SAiWrYMXLbEUZ4T_y2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import *
from sklearn.datasets import load_iris
from plotly.express import scatter_3d

plt.rcParams['figure.figsize'] = [10, 10] # 파라미터를 미리 세팅해 놓는 것
sns.set(style = 'darkgrid')
plt.rcParams['scatter.edgecolors'] = 'black'
pd.set_option('display.max_columns', None)
pd.set_option('display.max_row', None)
pd.set_option('display.unicode.east_asian_width', True) # eda를 시작할 때 기본적으로 넣는 것

iris_dataset = load_iris()
iris = pd.DataFrame(iris_dataset.data,
                    columns = iris_dataset.feature_names)
labels = iris_dataset.target_names
iris['species']  = iris_dataset.target
iris.species = iris.species.apply(lambda x:labels[x])
iris.species = iris.species.astype('category')
iris.info()
print(iris.head())

iris.isna().sum()  # 결측값 검색-> 있다면 어떻게 처리할 것인지 등

iris.duplicated().sum() # 같은 data가 있는지(중복 제거 생각)

iris.describe().T

iris.species.value_counts(dropna=True) # NAN값 빼고 보겠다.

iris.columns

iris.columns = ['SL', 'SW', 'PL', 'PW', 'species']

axes = iris[iris.species =='setosa'].plot(kind = 'scatter', 
                                          x = 'SL', y = "SW", color = 'orange', label = 'setosa')
axes = iris[iris.species =='versicolor'].plot(kind = 'scatter',ax = axes,
                                          x = 'SL', y = "SW", color = 'blue', label = 'versicolor')
axes = iris[iris.species =='virginica'].plot(kind = 'scatter',ax = axes,
                                          x = 'SL', y = "SW", color = 'green', label = 'virginica')
axes.set_xlabel('Sepal Length')
axes.set_ylabel('Sepal Width')
plt.show()

axes = iris[iris['species']=='setosa'].plot(kind='scatter',
        x='PL', y='PW',
        color='orange', label='setosa', edgecolor='k')
iris[iris['species']=='versicolor'].plot(kind='scatter',
        x='PL', y='PW',
        color='blue', label='versicolor', ax=axes, edgecolor='k')
iris[iris['species']=='virginica'].plot(kind='scatter',
        x='PL', y='PW',
        color='green', label='virginica', ax=axes, edgecolor='k')
axes.set_xlabel('Petal length')
axes.set_ylabel('Petal width')
axes.set_title('Petal length vs Petal width')
plt.show()

sns.FacetGrid(iris, hue='species').map(plt.scatter, 
        'SL', 'SW').add_legend()
fig = plt.gcf()
fig.set_size_inches(10, 7)
plt.show()

sns.pairplot(iris, hue = 'species') 
plt.show()

fig = scatter_3d(iris, x='SL', 
                 y='PL', z='PW',
                 color='species')
fig.show()

fig = scatter_3d(iris, x='SL', 
                 y='PL', z='PW',
                 color='SW', symbol='species',
                 size='PL', size_max=18,
                 opacity=0.7)
fig.show()

axes = iris[iris['species']=='setosa']['SL'].hist(
    color='orange', label='setosa', 
    edgecolor='k', bins=10, alpha=0.3)
iris[iris['species']=='versicolor']['SL'].hist(
    color='blue', label='versicolor', ax=axes,
    edgecolor='k', bins=10, alpha=0.3)
iris[iris['species']=='virginica']['SL'].hist(
    color='green', label='virginica', ax=axes,
    edgecolor='k', bins=10, alpha=0.3)
axes.set_xlabel('Petal length')
axes.set_title('Petal length hist')
plt.show()

sns.heatmap(iris.corr(), annot=True)
plt.show()

iris.boxplot(by='species', figsize = (12,12))
plt.show() # 중간값, 4사분의 *1.5최대 최소값, 이상치 등을 알 수 있고 분산을 추측이 가능하다

plt.figure()
plt.subplot(2,2,1)
sns.violinplot(x = 'species', y = 'PL', data = iris)
plt.subplot(2,2,2)
sns.violinplot(x = 'species', y = 'PW', data = iris)
plt.subplot(2,2,3)
sns.violinplot(x = 'species', y = 'SL', data = iris)
plt.subplot(2,2,4)
sns.violinplot(x = 'species', y = 'SL', data = iris)
plt.show()

